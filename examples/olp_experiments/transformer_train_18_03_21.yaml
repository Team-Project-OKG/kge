import: [transformer_lookup_embedder]                                         #!!! adjust if model is changed


# settings for the dataset to use
dataset:
  type: olp
  name: olpbench

# settings for ComplEx and the respective embedders
model: complex

complex:
  entity_embedder.type: transformer_lookup_embedder                          #!!! adjust if model is changed
  relation_embedder.type: transformer_lookup_embedder                        #!!! adjust if model is changed


transformer_lookup_embedder:                                                  #!!! adjust if model is changed (incl. parameters of the model)
  cut_padding_in_batch: True
  set_padding_embeddings_to_0: True

  bin_within_batch: True
  bin_size: 500
  initialize: xavier_uniform_ # is Glorot initialization
  dim: 512
  dropout: 0.1
  nhead: 8
  num_layers: 4
  pooling: cls
  dim_ff: 2048

# settings for the training job of each hyperparameter combination
train:
  type: negative_sampling
  max_epochs: 100
  batch_size: 2048
  subbatch_auto_tune: True

  lr_scheduler: "StepLR"

  # Additional arguments for the scheduler.
  lr_scheduler_args:
    step_size: 10
    gamma: 0.5
    verbose: False
    +++: +++
  optimizer:
    +++: +++
    default:
      args:
        +++: +++
        eps: 1e-9
        lr: 0.002
        weight_decay: 3.5e-07
      type: Adam

# settings for negative sampling
# use number of replacements equal to the batch size to approximate Samuel's negative sampling algorithm
# num_samples describes the length of individual samples, not the number of samples. e.g. num_sample: 4 -> [rand, rand, rand, rand]; num_sample:3 -> [rand, rand, rand]
#!!! look into how to reproduce Samuel's negative sampling algorithm
negative_sampling:
  shared: True
  with_replacement: False
  implementation: batch
  samples_within_batch: True


# settings for the evaluation job
eval:
  type: olp_entity_ranking
  batch_size: 500
