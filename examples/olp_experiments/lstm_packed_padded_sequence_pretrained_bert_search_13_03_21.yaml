# Hyperparameter search for LSTM with PyTorch padding cutting and BERT pre-trained embeddings

import: [packed_lstm_lookup_embedder]

# general settings for the hyperparameter optimization job
job.type: search
search.type: ax
valid.metric: mean_reciprocal_rank_filtered

ax_search:
  num_trials: 10
  num_sobol_trials: 10
  parameters:
    - name: train.optimizer.default.args.lr
      type: range
      bounds: [0.01, 0.2]
    - name: train.optimizer.default.args.weight_decay
      type: range
      bounds: [0.0000000001, 0.000001]
    - name: packed_lstm_lookup_embedder.dropout
      type: range
      bounds: [0.0, 0.1]


# settings for the dataset to use
dataset:
  type: olp
  name: olpbench_bert

# settings for ComplEx and the respective embedders
model: complex

complex:
  entity_embedder.type: packed_lstm_lookup_embedder
  relation_embedder.type: packed_lstm_lookup_embedder

packed_lstm_lookup_embedder:
  initialize: xavier_uniform_ # is Glorot initialization
  bin_within_batch: False  # if True, then bin_size is also activated
  token_embedding_model:
    use: True
    name: prajjwal1/bert-mini
    precache: 15000
    freeze: True
  dim: 256
  num_layers: 1

# settings for the training job of each hyperparameter combination
train:
  type: negative_sampling
  max_epochs: 10
  batch_size: 4096
  subbatch_auto_tune: True
  optimizer: Adagrad

# settings for negative sampling
negative_sampling:
  shared: True
  with_replacement: False
  implementation: batch
  samples_within_batch: True

# settings for the evaluation job
eval:
  type: olp_entity_ranking
  batch_size: 5000
